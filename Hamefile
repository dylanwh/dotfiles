#!/usr/bin/env perl

build_graph(
  'Sync/ssh/authorized_keys' => {
    action  => 'download',
    url     => "https://github.com/$GITHUB_USER.keys",
    parents => 1
  },
  ".ssh" => {action => 'mkdir', mode => 0700,},
  ".ssh/authorized_keys" =>
    {action => "link", path => "$HOME/Sync/ssh/authorized_keys", parents => 1},
  '.pyenv' => {action => 'git', url => 'https://github.com/pyenv/pyenv.git'},
  '.plenv' => {action => 'git', url => 'https://github.com/tokuhirom/plenv.git'},
  '.plenv/plugins/perl-build' => {
    action  => 'git',
    url     => 'https://github.com/tokuhirom/perl-build.git',
    parents => 1
  },
  '.emacs.d' => {action => 'git', url => 'https://github.com/syl20bnr/spacemacs'},
  "go/bin/gore" => {
    action   => 'go',
    packages => [
      'github.com/motemen/gore/cmd/gore', 'github.com/k0kubun/pp',
      'github.com/mdempsky/gocode',
    ],
  },
  'Archives' => {
    action => 'link',
    path   => 'Library/Mobile Documents/com~apple~CloudDocs/Archives',
    os     => 'darwin',
  },
  '.replyrc' => {
    action       => 'template',
    reply_script => "$HOME/.reply.pl",
    depends      => ["$HOME/.reply.pl", __FILE__]
  },
  group(
    fish_env => (
      ".config/fish/plenv.fish" =>
        {action => 'env', command => 'plenv init - fish', depends => ['.plenv']},
      ".config/fish/pyenv.fish" =>
        {action => 'env', command => 'pyenv init - fish', depends => ['.pyenv']},
      ".config/fish/chef.fish" => {
        action  => 'env',
        command => 'chef shell-init fish',
        skip    => sub { not have('chef') },
      },
      ".config/fish/brew.fish" => {
        action  => "env",
        command => 'brew command-not-found-init',
        os      => 'darwin',
        source  => 1,
        skip => sub { system('brew command command-not-found-init &>/dev/null') != 0 }
      },
    )
  ),
  group(
    vim => (
      ".vim/pack/dylan/opt/solarized8" =>
        {action => 'git', url => 'https://github.com/lifepillar/vim-solarized8.git'},
      ".vim/pack/dylan/start/abolish" =>
        {action => 'git', url => "https://github.com/tpope/vim-abolish.git"},
      ".vim/pack/dylan/start/ag" =>
        {action => 'git', url => "https://github.com/epmatsw/ag.vim.git"},
      ".vim/pack/dylan/start/airline" =>
        {action => 'git', url => "https://github.com/vim-airline/vim-airline.git"},
      ".vim/pack/dylan/start/airline-themes" => {
        action => 'git',
        url    => 'https://github.com/vim-airline/vim-airline-themes.git'
      },
      ".vim/pack/dylan/start/commentary" =>
        {action => 'git', url => "https://github.com/tpope/vim-commentary.git"},
      ".vim/pack/dylan/start/cpanfile" =>
        {action => 'git', url => "https://github.com/moznion/vim-cpanfile.git"},
      ".vim/pack/dylan/start/eunuch" =>
        {action => 'git', url => "https://github.com/tpope/vim-eunuch.git"},
      ".vim/pack/dylan/start/fugitive" =>
        {action => 'git', url => "https://github.com/tpope/vim-fugitive.git"},
      ".vim/pack/dylan/start/gitgutter" =>
        {action => 'git', url => "https://github.com/airblade/vim-gitgutter.git"},
      ".vim/pack/dylan/start/html5" =>
        {action => 'git', url => "https://github.com/othree/html5.vim.git"},
      ".vim/pack/dylan/start/perl" =>
        {action => 'git', url => "https://github.com/vim-perl/vim-perl.git"},
      ".vim/pack/dylan/start/racket" =>
        {action => 'git', url => "https://github.com/wlangstroth/vim-racket.git"},
      ".vim/pack/dylan/start/rails" =>
        {action => 'git', url => "https://github.com/tpope/vim-rails.git"},
      ".vim/pack/dylan/start/repeat" =>
        {action => 'git', url => "https://github.com/tpope/vim-repeat.git"},
      ".vim/pack/dylan/start/supertab" =>
        {action => 'git', url => "https://github.com/ervandew/supertab.git"},
      ".vim/pack/dylan/start/surround" =>
        {action => 'git', url => "https://github.com/tpope/vim-surround.git"},
      ".vim/pack/dylan/start/tabular" =>
        {action => 'git', url => "https://github.com/godlygeek/tabular.git"},
      ".vim/pack/dylan/start/textobj-rubyblock" => {
        action => 'git',
        url    => "https://github.com/nelstrom/vim-textobj-rubyblock.git"
      },
      ".vim/pack/dylan/start/textobj-user" =>
        {action => 'git', url => "https://github.com/kana/vim-textobj-user.git"},
      ".vim/pack/dylan/start/unimpaired" =>
        {action => 'git', url => "https://github.com/tpope/vim-unimpaired.git"},
      ".vim/pack/dylan/start/vinegar" =>
        {action => 'git', url => "https://github.com/tpope/vim-vinegar.git"},
    )
  ),
  group(
    go_emacs => (
      'go/bin/gopls' => {
        action   => 'go',
        env      => ['GO111MODULE=on'],
        packages => ['golang.org/x/tools/gopls@latest']
      },
      'go/bin/golangci-lint' => {
        action   => 'go',
        env      => ['GO111MODULE=on', 'CGO_ENABLED=0'],
        args     => ['-trimpath', '-ldflags', '-s -w'],
        packages => ['github.com/golangci/golangci-lint/cmd/golangci-lint'],
      },
      'go/bin/godoc' =>
        {action => 'go', packages => ['golang.org/x/tools/cmd/godoc']},
      'go/bin/goimports' =>
        {action => 'go', packages => ['golang.org/x/tools/cmd/goimports']},
      'go/bin/gorename' =>
        {action => 'go', packages => ['golang.org/x/tools/cmd/gorename']},
      'go/bin/guru' => {action => 'go', packages => ['golang.org/x/tools/cmd/guru']},
      'go/bin/gotests' =>
        {action => 'go', packages => ['github.com/cweill/gotests/...']},
      'go/bin/fillstruct' => {
        action   => 'go',
        packages => ['github.com/davidrjenni/reftools/cmd/fillstruct']
      },
      'go/bin/gomodifytags' =>
        {action => 'go', packages => ['github.com/fatih/gomodifytags']},
      'go/bin/godoctor' =>
        {action => 'go', packages => ['github.com/godoctor/godoctor']},
      'go/bin/gopkgs' =>
        {action => 'go', packages => ['github.com/haya14busa/gopkgs/cmd/gopkgs']},
      'go/bin/impl'   => {action => 'go', packages => ['github.com/josharian/impl']},
      'go/bin/gocode' => {action => 'go', packages => ['github.com/mdempsky/gocode']},
      'go/bin/godef'  => {action => 'go', packages => ['github.com/rogpeppe/godef']},
      'go/bin/gogetdoc' => {action => 'go', packages => ['github.com/zmb3/gogetdoc']},
    )
  ),
);


__DATA__

@@ .replyrc.ep
% my $lines = Mojo::File->new($reply_script)->slurp;
% my $i = 1;
% foreach my $line (split(/\n/, $lines)) {
% next unless $line =~ /\S/;
script_line<%= $i++ %> = <%= $line %>
% }

[Autocomplete::Commands]
[Autocomplete::Functions]
[Autocomplete::Globals]
[Autocomplete::Lexicals]
[Autocomplete::Methods]
[Autocomplete::Packages]
[Colors]
[DataPrinter]
[FancyPrompt]
[Hints]
[Interrupt]
[LexicalPersistence]
[Packages]
[ReadLine]
[ResultCache]
[CollapseStack]
num_lines = 2
[Timer]
mintime = 0.01
