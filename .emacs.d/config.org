#+TITLE: emacs configuration file
#+AUTHOR: Dylan William Hardison
#+EMAIL: dylan@hardison.net
#+OPTIONS: ^:nil

* installation
Copy this file to ~/.emacs.d and add the following to ~/.emacs/init.el:

#+BEGIN_SRC emacs-lisp :tangle no
  (setq package-archives '(("melpa" . "http://melpa.org/packages/")
                           ("org" . "http://orgmode.org/elpa/")
                           ("gnu" .  "http://elpa.gnu.org/packages/"))
        package-enable-at-startup nil)
  (package-initialize)

  (unless (package-installed-p 'use-package)
    (unless (assoc 'use-package package-archive-contents)
      (package-refresh-contents))
    (package-install 'use-package))

  (require 'use-package)
  (use-package org :ensure t)
  (org-babel-load-file "~/.emacs.d/config.org")
#+END_SRC

* environment
** Tweak the gc settings
#+BEGIN_SRC emacs-lisp
  (setq-default gc-cons-threshold 50000000
                gc-cons-percentage 0.5)
#+END_SRC

** user-data-directory
I like keeping all "state" data in the ~/.local/share directory
tree, rather than my ~/.emacs.d -- because that way everything in ~/.emacs.d
can be versioned.

#+BEGIN_SRC emacs-lisp
  (defconst user-data-directory
    (concat (or (getenv "XDG_DATA_HOME")
                (concat (getenv "HOME") "/.local/share")) "/emacs/"))

  (unless (file-exists-p user-data-directory)
    (mkdir user-data-directory t))
#+END_SRC

** add ~/.emacs.d/elisp to load-path

For things that arn't available as an elpa package, add ~/.emacs.d/elisp
to the load-path. This is also where I can put my own utilities functions.
#+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path (concat user-emacs-directory "elisp"))
#+END_SRC

** compile elpa stuff
We don't store the *.elc files in git, so this needs to run when emacs starts.
#+BEGIN_SRC emacs-lisp
  (byte-recompile-directory (expand-file-name "~/.emacs.d/elpa"))
#+END_SRC
** custom.el
Keep customize settings in its own file (~/.emacs.d/custom.el)
and ... don't bother loading it. customize settings are nice, but they tend to not be very portable
(such as absolute pathnames leaking into some settings).

#+BEGIN_SRC emacs-lisp
  (setq custom-file (concat user-emacs-directory "custom.el"))
  ;; (load-file custom-file)
#+END_SRC

** bootstrap packages
There are a few packages that need to be loaded before anything else,
because I use them through out this file.
#+BEGIN_SRC emacs-lisp
    (use-package after)
    (use-package bind)
    (use-package f :ensure t)
    (use-package request :ensure t
      :config (setq request-storage-directory (concat user-data-directory "request")))
    (use-package my-util)
#+END_SRC

** server
I always want an emacs server running.
#+BEGIN_SRC emacs-lisp
  (server-start)
#+END_SRC

** environmental variables
 #+BEGIN_SRC emacs-lisp
   (use-package exec-path-from-shell :ensure t)

   (when (memq window-system '(mac ns))
     (exec-path-from-shell-initialize)
     (exec-path-from-shell-copy-env "TZ")
     (exec-path-from-shell-copy-env "LC_COLLATE")
     (exec-path-from-shell-copy-env "EMAIL")
     (exec-path-from-shell-copy-env "REALNAME")
     (exec-path-from-shell-copy-env "PERL5LIB")
     (exec-path-from-shell-copy-env "PERL_MM_OPT")
     (exec-path-from-shell-copy-env "PERL_MB_OPT")
     (exec-path-from-shell-copy-env "PWSAFE_DATABASE"))

   (setenv "PAGER" "cat")
   (setenv "GIT_PAGER" "cat")
   (setenv "MANPAGER" "cat")
 #+END_SRC
** platform tests
 #+BEGIN_SRC emacs-lisp
   (cl-case system-type
     (darwin (progn
               (if (executable-find "gls")
                 (setq insert-directory-program "/usr/local/bin/gls"))
               (if (executable-find "trash")
                   (use-package osx-trash :ensure t)))))
 #+END_SRC

* general settings

settings that don't make more sense anywhere else...

#+BEGIN_SRC emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)

  (setq delete-by-moving-to-trash t
        mark-ring-max 64
        global-mark-ring-max 128
        save-interprogram-paste-before-kill t

        ;; auth-source configuration
        auth-sources '("~/annex/private/authinfo.gpg"))

  (setq vc-make-backup-files t
        vc-handled-backends '(SVN Git))

  (setq compilation-always-kill t
        compilation-ask-about-save nil

        truncate-partial-width-windows nil

        ;; ediff
        ediff-split-window-function 'split-window-horizontally
        ediff-window-setup-function 'ediff-setup-windows-plain

        ;; better scrolling
        scroll-conservatively 9999
        scroll-preserve-screen-position t)

  (global-auto-revert-mode 1) ;; revert buffers when their files change
  (electric-indent-mode t)    ;; automatic indent
  (transient-mark-mode 1)     ;; lose selection when buffer changes, etc
  (delete-selection-mode 1)   ;; typing replaces selected text.
  (require 'midnight)         ;; clean up old buffers periodically
#+END_SRC
* look and feel
Configure font, theme, and a few other things relating to how
emacs looks.

** fonts
Choose font size based on hostname
#+BEGIN_SRC emacs-lisp
  (defvar system-name-short (car (split-string (system-name) "\\." t)))

  (cl-case (intern system-name-short)
    (thor     (set-frame-font "Fira Mono Medium-10" nil t))
    (mac-thor (set-frame-font "Source Code Pro Light-14" nil t))
    (freya    (set-frame-font "Fira Mono Medium-10")))
#+END_SRC

** theme
Install solarized
#+BEGIN_SRC emacs-lisp
  (setq solarized-distinct-fringe-background t
        solarized-high-contrast-mode-line nil
        solarized-scale-org-headlines nil
        solarized-use-less-bold nil
        solarized-use-more-italic t
        solarized-use-variable-pitch nil)

  (use-package solarized-theme :ensure t
    :config (progn
              (load-theme 'solarized-dark t t)
              (load-theme 'solarized-light t t)))

  (enable-theme 'solarized-dark)

  (defun my-solarized-toggle ()
    (interactive)
    (cond
     ((member 'solarized-dark custom-enabled-themes)
      (disable-theme 'solarized-dark)
      (enable-theme 'solarized-light))
     ((member 'solarized-light custom-enabled-themes)
      (disable-theme 'solarized-light)
      (enable-theme 'solarized-dark))))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package smart-mode-line :ensure t
    :init
    (progn
      (setq sml/show-client t
            sml/show-eol t
            sml/mode-width 'right
            sml/show-frame-identification t
            sml/shorten-modes t
            sml/no-confirm-load-theme t
            sml/theme 'respectful)
      (sml/setup)))
#+END_SRC

Hide minor modes
#+BEGIN_SRC emacs-lisp
  (use-package rich-minority
    :ensure t
    :config
    (setq rm-blacklist
          '(" EvilOrg"
            " ew:mnlt"
            " Helm"
            " MRev"
            " Guide"
            " Undo-Tree"
            " GitGutter"
            " Server")))
#+END_SRC

Turn off most of the GUI features. they're wastes of space.

#+BEGIN_SRC emacs-lisp
  (when (fboundp 'menu-bar-mode) (menu-bar-mode -1))
  (when (display-graphic-p) (fringe-mode 16))
  (when (fboundp 'tool-bar-mode) (tool-bar-mode -1))
  (when (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))
#+END_SRC

** initial buffer settings: just eshell.
I don't want emacs to show anything but an eshell at start-up.

#+BEGIN_SRC emacs-lisp
  (setq inhibit-splash-screen t
        inhibit-startup-echo-area-message t
        inhibit-startup-message t
        initial-buffer-choice #'eshell
        initial-scratch-message "")
#+END_SRC

** annoyances fixed
No ringing bells, no blinking cursor. show current function
and allow 256 xterm colors.

#+BEGIN_SRC emacs-lisp
  (setq ring-bell-function (lambda () ()))
  (which-function-mode t)     ;; display current function
  (blink-cursor-mode -1)      ;; disable blinking cursor

  (use-package xterm-color
    :ensure t
    :init
    (progn (add-hook 'comint-preoutput-filter-functions 'xterm-color-filter)
           (setq comint-output-filter-functions
                 (remove 'ansi-color-process-output comint-output-filter-functions))
           (setq font-lock-unfontify-region-function 'xterm-color-unfontify-region)))
#+END_SRC

** better buffer names for duplicates
#+BEGIN_SRC emacs-lisp
  (use-package uniquify
    :init
    (progn
      (setq uniquify-buffer-name-style 'forward
            uniquify-separator "/"
                                          ; leave special buffers alone
            uniquify-ignore-buffers-re "^\\*"
            uniquify-after-kill-buffer-p t)))

  (add-hook 'compilation-filter-hook
            (lambda ()
              (when (eq major-mode 'compilation-mode)
                (require 'ansi-color)
                (let ((inhibit-read-only t))
                  (ansi-color-apply-on-region (point-min) (point-max))))))

  (when (display-graphic-p)
    (use-package git-gutter-fringe+ :ensure t))

  (use-package git-gutter+
    :ensure t
    :init (global-git-gutter+-mode))
#+END_SRC

** text formatting
Tabs are 4 real spaces, by default we use 80 columns with
a word wrap. Empty lines are indicated in the fringe.
#+BEGIN_SRC emacs-lisp
  (setq sentence-end-double-space nil)
  (setq-default fill-column 80
                default-tab-width 4
                indent-tabs-mode nil
                indicate-empty-lines t
                imenu-auto-rescan t
                word-wrap t)
#+END_SRC

** utf-8
Enable UTF-8 for all the things.
#+BEGIN_SRC emacs-lisp
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-selection-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)
#+END_SRC

** cleanup whitespace
Use ethan-wspace to handle whitespace issues.
#+BEGIN_SRC emacs-lisp
  (setq mode-require-final-newline nil)

  (use-package ethan-wspace :ensure t)
#+END_SRC
* save places, history, recent files and backups
** saveplace
#+BEGIN_SRC emacs-lisp
(use-package saveplace
  :init
  (progn
    (setq save-place-file (concat user-data-directory "places"))
    (setq-default save-place t)))
#+END_SRC

** minibuffer history
#+BEGIN_SRC emacs-lisp
(use-package savehist
  :init
  (progn
    (setq savehist-file (concat user-data-directory "savehist")
          savehist-additional-variables '(search ring regexp-search-ring)
          savehist-autosave-interval 60)
    (setq-default history-length 1000)
    (savehist-mode +1)))
#+END_SRC

** recent files
#+BEGIN_SRC emacs-lisp
(use-package recentf
  :ensure t
  :config
  (progn
    (setq recentf-save-file (concat user-data-directory "recentf"))
    (setq recentf-max-saved-items 1000)
    (setq recentf-max-menu-items 500)
    (recentf-mode +1)
    (add-to-list 'recentf-exclude "COMMIT_EDITMSG\\'")
    (run-with-timer 1800 1800 'recentf-save-list)))
#+END_SRC

** store backup files in the data dir
#+BEGIN_SRC emacs-lisp
(setq backup-directory-alist         `((".*" . ,(concat user-data-directory "backups")))
      auto-save-file-name-transforms `((".*" ,(concat user-data-directory "backups") t))
      auto-save-list-file-prefix     (concat user-data-directory "auto-save-list/saves-"))
#+END_SRC

* file management
** projectile
#+BEGIN_SRC emacs-lisp
  (use-package projectile :ensure t
    :config
    (progn
      (setq projectile-enable-caching t
            projectile-tags-command "echo /usr/bin/etags.ctags -Re -f \"%s\" %s")
      (setq projectile-cache-file
            (concat user-data-directory "projectile.cache"))
      (setq projectile-known-projects-file
            (concat user-data-directory "projectile-bookmarks.eld"))
  
      (projectile-global-mode)))
#+END_SRC

** dired
#+BEGIN_SRC emacs-lisp
  (use-package dired-x)

  (setq dired-listing-switches "-aBhl  --group-directories-first"
        dired-omit-files "^\\.?#\\|^\\."
        dired-omit-files-p t)
#+END_SRC
** eshell

#+BEGIN_SRC emacs-lisp
  (after 'esh-module
    (let ((eshell-data-dir (concat user-data-directory "eshell/")))
      (unless (f-dir? eshell-data-dir)
        (make-directory eshell-data-dir))

      ;; eshell settings
      (setq eshell-where-to-jump 'end
            eshell-review-quick-commands 'not-even-short-output
            eshell-smart-space-goes-to-end nil

            ;; eshell
            eshell-scroll-to-bottom-on-input 'all

            ;; kill annoying banner
            eshell-banner-message "\n\n"

            ;; em-glob
            eshell-glob-case-insensitive t
            eshell-error-if-no-glob t

            ;; em-hist
            eshell-history-size 1024
            eshell-history-file-name (concat eshell-data-dir "history")
            eshell-last-dir-ring-file-name (concat eshell-data-dir "lastdir")

            ;; em-prompt
            eshell-prompt-function 'my-eshell-prompt)))
#+END_SRC

customize some stuff.

#+BEGIN_SRC emacs-lisp
  (defun eshell/clear ()
    "Clears the buffer."
    (let ((inhibit-read-only t))
      (erase-buffer)))

  (defun around-eshell/cd (orig &rest args)
      (if (and args (assoc (car args) bookmark-alist))
          (apply orig (cons (bookmark-location (car args)) (cdr args)))
        (apply orig args)))

  (advice-add 'eshell/cd :around #'around-eshell/cd)

  (defun eshell/ff (&rest args)
    "Opens a file in emacs."
    (unless (null args)
      (mapc #'find-file-other-window (mapcar #'expand-file-name (eshell-flatten-list (reverse args))))))

  (defun my-current-git-branch ()
    (let ((branch (car (loop for match in (split-string (shell-command-to-string "git branch") "\n")
                             when (string-match "^\*" match)
                             collect match))))
      (if (not (eq branch nil))
          (concat " [" (substring branch 2) "]")
        "")))

  (defun my-eshell-prompt ()
    (concat (propertize (abbreviate-file-name (eshell/pwd)) 'face 'eshell-prompt)
            (propertize (my-current-git-branch) 'face 'font-lock-function-name-face)
            (propertize " $ " 'face 'font-lock-constant-face)))

  (defun eshell-maybe-bol ()
    (interactive)
    (let ((p (point)))
      (eshell-bol)
      (if (= p (point))
          (beginning-of-line))))

  (add-hook 'eshell-mode-hook
            (lambda () (define-key eshell-mode-map "\C-a" 'eshell-maybe-bol)))

  (defun server-eshell ()
    (lexical-let ((buf (eshell t))
                  (client (first server-clients))
                  (frame (selected-frame)))
      (cl-labels ((close (&optional arg)
                      (when (not (boundp 'cve/recurse))
                        (let ((cve/recurse t))
                          (delete-frame frame)
                          (kill-buffer buf)
                          (server-delete-client client)))))
        (add-hook 'eshell-exit-hook #'close t t)
        (add-hook 'delete-frame-functions #'close t t))
      (local-set-key (kbd "C-x #") (lambda () (interactive) (kill-buffer buf)))
      (delete-other-windows)
      nil))

  (defun eshell/bookmark (name &optional location)
    (bookmark-set name)
    (when location
      (bookmark-set-filename name location)))

  (defun eshell/bookmarks ()
    (let ((max-width (apply #'max (mapcar (lambda (x) (length (car x))) bookmark-alist))))
      (dolist (bookmark bookmark-alist)
        (eshell-printn
         (format (format "%%-%ds (%%s)" max-width)
                               (car bookmark)
                               (cdr (assq 'filename (cdr bookmark))))))))
#+END_SRC
*** bmo eshell stuff
This is basically just a shortcut to spawn an eshell in the bz-dir and a "cdb" eshell command.

#+BEGIN_SRC emacs-lisp
  (defun bzshell ()
    (interactive)
    (let* ((default-directory bz-dir)
           (eshell-buffer-name "*bzshell*"))
      (eshell)))

  (defun eshell/cdb (bug-id)
    (let ((new-dir
           (let* ((default-directory bz-dir)
                  (bug-dir (shell-command-to-string (format "bz path %s" bug-id))))
             (with-parsed-tramp-file-name default-directory nil
               (tramp-make-tramp-file-name method user host bug-dir hop)))))
      (eshell/cd new-dir)
      (shell-command-to-string "bz summary")))


#+END_SRC

** git-annex
This just adds a few things to dired mode.

#+BEGIN_SRC emacs-lisp
  (use-package git-annex :ensure t)
#+END_SRC
** magit
#+BEGIN_SRC emacs-lisp
  (setq magit-last-seen-setup-instructions "1.4.0")
  (use-package magit
    :ensure t
    :config
    (progn
      (setq magit-diff-options '("--histogram"))
      (setq magit-stage-all-confirm nil)

      (defadvice magit-status (around my-magit-fullscreen activate)
        (window-configuration-to-register :magit-fullscreen)
        ad-do-it
        (delete-other-windows))

      (defun my-magit-quit-session ()
        (interactive)
        (kill-buffer)
        (jump-to-register :magit-fullscreen)))

    (after 'evil
      (after 'git-commit-mode
        (add-hook 'git-commit-mode-hook 'evil-emacs-state))

      (after 'magit-blame
        (defadvice magit-blame-file-on (after advice-for-magit-blame-file-on activate)
          (evil-emacs-state))
        (defadvice magit-blame-file-off (after advice-for-magit-blame-file-off activate)
          (evil-exit-emacs-state)))))
#+END_SRC
** tramp
#+BEGIN_SRC emacs-lisp
  (require 'tramp)
  (setq tramp-inline-compress-start-size (* 1024 1024)
        tramp-persistency-file-name (concat user-data-directory "tramp"))
  (add-to-list 'tramp-remote-path 'tramp-own-remote-path)
  (add-to-list 'tramp-remote-path "/usr/local/bin")
#+END_SRC

** pwsafe
#+BEGIN_SRC emacs-lisp
  (use-package pwsafe
    :commands (pwsafe pwsafe-copy-password pwsafe-add-entry))
#+END_SRC
* communication
** email
 #+BEGIN_SRC emacs-lisp

   (defun my-guess-email-account (msg)
     (let ((maildir (mu4e-message-field msg :maildir)))
       (if (string-match "^/\\(.*?\\)/" maildir)
           (match-string 1 maildir)
         "fastmail")))

   (defun my-guess-trash-folder (msg)
     (concat "/" (my-guess-email-account msg) "/trash"))

   (defun my-guess-sent-folder (msg)
     (concat "/" (my-guess-email-account msg) "/sent"))

   (defun my-imapfilter ()
     (interactive)
     (async-shell-command "imapfilter" "*imapfilter*"))

   (when (executable-find "mu")
     (use-package mu4e
       :commands mu4e
       :config
       (progn
         (setq mu4e-maildir (expand-file-name "~/mail")
               mu4e-change-filenames-when-moving t
               mu4e-view-show-images t
               mu4e-view-show-addresses t
               mu4e-get-mail-command "mbsync -qa"
               mu4e-my-email-addresses '( dylan@hardison.net
                                          dhardison@cpan.org
                                          dhardison@mozilla.com
                                          dylan@mozilla.com
                                          dylanwh@gmail.com ))

         (when (executable-find "w3m")
           (setq mu4e-html2text-command "w3m -T text/html"))

         (setq mu4e-sent-folder #'my-guess-sent-folder
               mu4e-drafts-folder "/fastmail/drafts"
               mu4e-trash-folder #'my-guess-trash-folder
               user-mail-address "dylan@hardison.net")))
     (use-package mu4e-org)

     (use-package mu4e-maildirs-extension :ensure t
       :config (mu4e-maildirs-extension))
     (use-package org-mu4e))
 #+END_SRC
** weechat
   Configure weechat IRC client.
#+BEGIN_SRC emacs-lisp
  (setq weechat-modules
        '(weechat-sauron weechat-image weechat-button weechat-complete))

  (use-package weechat
    :ensure t
    :init
    (progn
      (setq weechat-host-default "lofn-e.hardison.net"
            weechat-port-default 19000
            weechat-auto-close-buffers t
            weechat-mode-default 'ssl
            weechat-auto-monitor-buffers '("hardison.#slug"
                                           "hardison.#lobby"
                                           "sine.#lobby"
                                           "mozilla.#bteam"
                                           "mozilla.#bmo"
                                           "mozilla.#bugzilla"))))

  (defun my-weechat-start ()
    (interactive)
    (weechat-connect nil nil))
#+END_SRC

** google-translate
#+BEGIN_SRC emacs-lisp
  (use-package google-translate
    :ensure t
    :commands (google-translate-at-point google-translate-smooth-translate)
    :config (require 'google-translate-smooth-ui))
#+END_SRC
* misc utilities
** bmo stuff

   Most of my customizations for working bugzilla.mozilla.org.
   There's also some stuff for org-mode later in this file

   - [[*bmo links][bmo org-mode links]]
   - [[*bmo eshell stuff][bmo eshell stuff]] 

 #+BEGIN_SRC emacs-lisp
   (defvar bz-url "http://bugzilla.local/")
   (defvar bz-dir "/ssh:bugzilla:/opt/bugzilla")

   (defun bz-browse-site ()
     (interactive)
     (browse-url (concat bz-url (projectile-project-name))))

   (defun bz-browse-bug ()
     (interactive)
     (let ((bug-id (projectile-project-name)))
       (when (string-match "^[0-9]+$" bug-id)
         (browse-url (concat  "https://bugzilla.mozilla.org/show_bug.cgi?id=" bug-id)))))

   (defun bz-new (bug-id)
     "start working on a new bug"
     (interactive "s")
     (let ((default-directory bz-dir))
       (async-shell-command (format "yes | bz new %s" bug-id) (format "*bznew:%s*" bug-id))))

   (defun bz-list ()
     (mapcar #'car
             (remove-if-not (lambda (x) (and (cadr x) (not (or (equal (car x) "..") (equal (car x) ".")))))
                            (directory-files-and-attributes (concat bz-dir "/htdocs")))))

   (defun bz-bug-id-p (bug-id) (not (null (string-match "^[0-9]+$" bug-id))))
   (defun bz-list-bugs () (remove-if-not #'bz-bug-id-p (bz-list)))

   (defun bz-summary ()
     "Show summary for current bug in projectile root"
     (interactive)
     (message (f-read (concat (projectile-project-root) "/data/summary"))))

   (defun bz-checksetup ()
     "Run checksetup.pl in the current project"
     (interactive)
     (projectile-with-default-dir (projectile-project-root)
       (async-shell-command "perl checksetup.pl")))

   (defun bmo-sql ()
     "Launch an iSQL buffer connected to bugzilla.local"
     (interactive)

     (let* ((auth-result (car (auth-source-search
                               :host "bugzilla.local"
                               :port "mysql")))
            (sql-connection-alist
             `((bmo (sql-product 'mysql)
                    (sql-server "bugzilla.local")
                    (sql-user ,(plist-get auth-result ':user))
                    (sql-database "bugs_bmo")
                    (sql-password ,(funcall (plist-get auth-result ':secret)))))))
       (sql-connect 'bmo "bmo-sql")))

   (defun bmo-summary (bug-id)
     (let ((bug-dir (f-join bz-dir (format "htdocs/%s" bug-id))))
       (if (f-dir? bug-dir)
           (f-read (f-join bug-dir "data" "summary"))
         (let ((response (request (format "https://bugzilla.mozilla.org/rest/bug/%s" bug-id)
                                  :params '( ("include_fields" . "summary") )
                                  :parser 'json-read
                                  :sync t)))
           (cdr (assq 'summary (aref (cdr (assq 'bugs (request-response-data response))) 0)))))))
 #+END_SRC
** org-mode
#+BEGIN_SRC emacs-lisp
  (require 'org-mouse)
  (require 'org-protocol)
  (require 'org-eshell)
  (require 'org-mobile)
  (require 'ob-js)

  (setq org-agenda-files '("~/org/bugzilla.org"
                           "~/.emacs.d/config.org"
                           "~/org/elastic-quick-search.org"
                           "~/org/notes.org"))

  (setq org-babel-load-languages '((emacs-lisp . t)
                                   (perl . t)
                                   (sql . t)
                                   (js . t)))

  (setq org-confirm-babel-evaluate              nil
        org-confirm-elisp-link-function         nil
        org-default-notes-file                  "~/org/notes.org"
        org-enforce-todo-checkbox-dependencies  t
        org-log-done                            'time
        org-log-into-drawer                     t
        org-open-directory-means-index-dot-org  t
        org-refile-allow-creating-parent-nodes  'confirm
        org-return-follows-link                 t
        org-src-fontify-natively                t
        org-tab-follows-link                    t
        org-tags-column                         140)
#+END_SRC
*** Load epresent, for presentations from org-mode buffers

#+BEGIN_SRC emacs-lisp
  (use-package epresent :ensure t)
#+END_SRC

*** bmo links
This makes it possible to link to bmo bugs using the "bmo:" syntax.

#+BEGIN_SRC emacs-lisp
  (defun my-org-describe-link (link description)
    (cond (description description)
          ((string-match "^bmo:\\([0-9]+\\)" link)
           (let ((bug-id (match-string 1 link)))
             (format "Bug %s - %s" bug-id (bmo-summary bug-id))))
          (t link)))

  (defun my-org-open-bmo (bug-id)
    (browse-url (format "https://bugzilla.mozilla.org/show_bug.cgi?id=%s" bug-id)))

  (org-add-link-type "bmo" #'my-org-open-bmo)
  (setq org-make-link-description-function #'my-org-describe-link)
#+END_SRC

*** ox publish
#+BEGIN_SRC emacs-lisp
  (require 'ox-publish)
  (setq org-publish-project-alist
        '(("org-notes"
           :base-directory "~/org/"
           :base-extension "org"
           :publishing-directory "~/pub/org"
           :recursive t
           :publishing-function org-html-publish-to-html
           :headline-levels 4             ; Just the default for this project.
           :auto-preamble t
           )))
#+END_SRC
*** ox-rst
For wrting reports and other documentation.

#+BEGIN_SRC emacs-lisp
  (use-package ox-rst :ensure t)
#+END_SRC
*** cpan links
 Things like [[cpan:Moose]]

 #+BEGIN_SRC emacs-lisp
   (add-to-list 'org-link-abbrev-alist '("cpan" . "https://metacpan.org/pod/%h"))
 #+END_SRC

*** mediawiki
#+BEGIN_SRC emacs-lisp
(use-package ox-mediawiki :ensure t)
#+END_SRC
** ham-mode
   Html As Markdown. Transparently edit an html file using markdown.

   When this mode is activated in an html file, the buffer is
   converted to markdown and you may edit at will, but the file is
   still saved as html behind the scenes. 

   See `ham-mode-markdown-to-html-command' and `ham-mode--save-as-html' on

#+BEGIN_SRC emacs-lisp
  (when (executable-find "markdown")
    (use-package ham-mode :ensure t))
#+END_SRC
** rainbow mode
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-mode :ensure t)
#+END_SRC
** sauron
   Configure sauron for notification support

#+BEGIN_SRC emacs-lisp
  (use-package sauron :ensure t
    :config
    (progn
      (setq sauron-modules (remove 'sauron-dbus sauron-modules))
      (setq sauron-max-line-length nil
            sauron-hide-mode-line t
            sauron-min-priority 3
            sauron-watch-patterns '("\\btea\\b"))))
#+END_SRC
** xkcd

#+BEGIN_SRC emacs-lisp
  (use-package xkcd :ensure t :commands xkcd)
#+END_SRC
* typing utilities
** company-mode

#+BEGIN_SRC emacs-lisp
  (use-package company :ensure t)
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package company-quickhelp :ensure t)
#+END_SRC

** guide-key
   Use guide-key to help figure out what things do.

#+BEGIN_SRC emacs-lisp
  (use-package guide-key
    :ensure t
    :init
    (progn
      (setq guide-key/guide-key-sequence '("C-x" "C-c" "," "C-w" "SPC")
            guide-key/recursive-key-sequence-flag t)
      (guide-key-mode 1)))
#+END_SRC

** more pcomplete
#+BEGIN_SRC emacs-lisp
  (use-package pcomplete-extension :ensure pcomplete-extension)
#+END_SRC
** smartparens

#+BEGIN_SRC emacs-lisp
  (use-package smartparens
    :ensure t
    :config
    (progn
      (require 'smartparens-config)

      (setq sp-show-pair-delay 0
            sp-show-pair-from-inside t
            sp-autoescape-string-quote nil
            sp-autoinsert-if-followed-by-same 1
            sp-highlight-pair-overlay t)

      (push #'cperl-mode sp-ignore-modes-list)
      (push #'perl-mode sp-ignore-modes-list)

      (sp-use-smartparens-bindings)
      (show-smartparens-global-mode t)
      (show-paren-mode -1)

      (defun my-open-block-c-mode (id action context)
        (when (eq action 'insert)
          (newline)
          (indent-according-to-mode)
          (forward-line -1)
          (indent-according-to-mode)))

      (sp-pair "{" nil :post-handlers
               '(:add (my-open-block-c-mode "RET")))
      (sp-pair "[" nil :post-handlers
               '(:add (my-open-block-c-mode "RET")))

      ;; fix conflict where smartparens clobbers yas' key bindings
      (defadvice yas-expand (before advice-for-yas-expand activate)
        (sp-remove-active-pair-overlay))))
#+END_SRC

** undo-tree
Before loading evil, configure undo-tree.
#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
    :ensure t
    :init
    (progn
      (setq undo-tree-auto-save-history t
            undo-tree-history-directory-alist `(("." . ,(concat user-data-directory "undo")))
            undo-tree-visualizer-timestamps t
            undo-tree-visualizer-diff t)))
#+END_SRC
** yassnippets
#+BEGIN_SRC emacs-lisp :tangle no
  (use-package yasnippet
    :ensure t
    :config
    (progn
      (let* ((yas-install-dir (car (file-expand-wildcards (concat package-user-dir "/yasnippet-*"))))
             (dir (concat yas-install-dir "/snippets/js-mode")))
        (when (file-exists-p dir)
          (delete-directory dir t)))

      (setq yas-fallback-behavior 'return-nil
            yas-also-auto-indent-first-line t)
      (add-to-list 'yas-snippet-dirs (concat user-emacs-directory "snippets"))
      (add-hook 'yas-before-expand-snippet-hook
                (lambda () (auto-complete-mode -1)))
      (add-hook 'yas-after-exit-snippet-hook
                (lambda () (auto-complete-mode t)))

      (yas-reload-all)
      (add-hook 'prog-mode-hook 'yas-minor-mode)
      (add-hook 'html-mode-hook 'yas-minor-mode)))
#+END_SRC
* navigation utilities
** ag
#+BEGIN_SRC emacs-lisp
  (use-package ag :ensure t)
#+END_SRC
** bookmarks
   bookmarks in the data dir too.
#+BEGIN_SRC emacs-lisp
  (setq bookmark-default-file (concat user-data-directory "bookmarks")
        bookmark-save-flag 1 ) ;; save after every change
#+END_SRC
** google-this
#+BEGIN_SRC emacs-lisp
  (use-package google-this :ensure t)
#+END_SRC
** helm
#+BEGIN_SRC emacs-lisp
  (use-package helm
    :ensure t
    :config
    (progn
      (require 'helm-config)

      (setq helm-adaptive-history-file (concat user-data-directory "helm-history"))
      (setq helm-ff-transformer-show-only-basename nil
            helm-command-prefix-key                "C-c h"
            helm-quick-update                      t
            helm-yank-symbol-first                 t
            helm-move-to-line-cycle-in-source      t
            helm-buffers-fuzzy-matching            t
            helm-bookmark-show-location            t
            helm-split-window-in-side-p            t
            helm-ff-file-name-history-use-recentf  t
            helm-ff-auto-update-initial-value      t)

      (helm-mode 1)
      (helm-adaptative-mode 1)
      (helm-autoresize-mode 1)

      (autoload 'helm-descbinds      "helm-descbinds" t)
      (autoload 'helm-eshell-history "helm-eshell"    t)
      (autoload 'helm-esh-pcomplete  "helm-eshell"    t)

      (add-hook 'eshell-mode-hook
                #'(lambda ()
                    (define-key eshell-mode-map
                      (kbd "<tab>")     #'helm-esh-pcomplete)
                    (define-key eshell-mode-map
                      (kbd "C-c C-l") #'helm-eshell-history)))

      (when (executable-find "curl")
        (setq helm-google-suggest-use-curl-p t))

      ;(use-package helm-company :ensure t)
      (use-package helm-swoop :ensure t)
      (use-package helm-ag :ensure t)
      (use-package helm-projectile
        :ensure t
        :config (helm-projectile-on))
      (use-package helm-descbinds :ensure t)))

  (defun my-projectile-helm-ag ()
    (interactive)
    (projectile-with-default-dir (projectile-project-root)
      (helm-ag)))
#+END_SRC

** registers
#+BEGIN_SRC emacs-lisp
  (set-register ?e '(file . "~/.emacs.d/config.org"))
  (set-register ?m '(file . "~/.mbsyncrc"))
  (set-register ?n '(file . "~/org/notes.org"))
  (set-register ?b '(file . "~/org/bugzilla.org"))
  (set-register ?q '(file . "~/org/elastic-quick-search.org"))
  (set-register ?i '(file . "~/.imapfilter/config.lua"))
#+END_SRC
* programming languages
** Perl

#+BEGIN_SRC emacs-lisp
  (use-package cperl-mode
    :ensure cperl-mode
    :config
    (progn

      (defalias 'perl-mode 'cperl-mode)
      (setq cperl-hairy t)
      (cperl-set-style "PerlStyle")

      (setq-default cperl-autoindent-on-semi nil
                    cperl-auto-newline nil
                    cperl-clobber-lisp-bindings t
                    cperl-close-paren-offset -4
                    cperl-continued-statement-offset 2
                    cperl-electric-keywords t
                    cperl-electric-lbrace-space nil
                    cperl-electric-linefeed nil
                    cperl-electric-parens nil
                    cperl-font-lock t
                    cperl-highlight-variables-indiscriminately t
                    cperl-indent-level 4
                    cperl-indent-parens-as-block t
                    cperl-indent-region-fix-constructs nil
                    cperl-info-on-command-no-prompt t
                    cperl-invalid-face nil
                    cperl-lazy-help-time 5
                    cperl-tab-always-indent t)))


  (defun perl-bugzilla? (dir)
    (f-exists? (f-join dir "checksetup.pl")))

  (defun perl-bugzilla-extension? (perl-dir file)
    (and (perl-bugzilla? perl-dir)
         (f-ancestor-of? (f-join perl-dir "extensions") file)))

  (defun perl-cpan? (dir)
    (and (f-dir? (f-join dir "lib"))
         (or (f-exists? (f-join dir "META.yml"))
             (f-exists? (f-join dir "Makefile.PL"))
             (f-exists? (f-join dir "META.json")))))

  (defun my-find-perl-dir (path)
    (when (f-exists? path)
      (f--traverse-upwards (or (perl-bugzilla? it)
                               (perl-cpan? it))
                           path)))

  (defun my-perl-module-file (file)
    (let* ((dir (f-dirname file))
           (perl-dir (or (my-find-perl-dir dir) dir)))
      (cond ((perl-bugzilla-extension? perl-dir file)
             (let ((ext-dir (f-dirname (f-relative file (f-join perl-dir "extensions")))))
               (f-join "Bugzilla" "Extension" ext-dir (f-relative file (f-join perl-dir "extensions" ext-dir "lib")))))
            ((perl-bugzilla? perl-dir)
             (f-relative file perl-dir))
            ((perl-cpan? perl-dir)
             (f-relative file (f-join perl-dir "lib")))
            (t (f-relative file default-directory)))))

  (defun my-perl-module-name (file)
    (replace-regexp-in-string "/" "::" (f-no-ext (my-perl-module-file file))))

#+END_SRC
** Javascript
#+BEGIN_SRC emacs-lisp
  (defun js-ctrl-c-ctrl-c ()
    (interactive)
    (require 'thingatpt)
    (let ((val (thing-at-point 'list)))
      ;; inside parameter list?
      (when (and (equal (substring val 0 1) "(")
                 (equal (substring val -1) ")"))
        (if (string-match-p "," val)
            (my-macro-ng-add-string-for-last-arg)
          (my-macro-ng-function-to-array-injected)))))

  (use-package js2-mode
    :ensure js2-mode
    :mode "\\.js"
    :config
    (progn
      (add-hook 'js2-mode-hook
                (lambda ()
                  (local-set-key (kbd "C-c C-c") 'js-ctrl-c-ctrl-c)))
      (setq js2-highlight-level 3)
      (setq js2-global-externs (list "$" "window" "BUGZILLA"))
      (setq-default js2-basic-offset 4)))

  (use-package js2-refactor
    :ensure js2-refactor
    :init (js2r-add-keybindings-with-prefix "C-c C-m"))

    ;; (when (executable-find "tern")
    ;;   (require-package 'tern)
    ;;   (add-hook 'js2-mode-hook 'tern-mode)
    ;;   (after 'tern
    ;;     (after 'auto-complete
    ;;       (require-package 'tern-auto-complete)
    ;;       (tern-ac-setup))
    ;;     (after 'company-mode
    ;;       (require-package 'company-tern)))))

#+END_SRC
** web
#+BEGIN_SRC emacs-lisp
  (use-package web-mode
    :ensure web-mode
    :mode ( ("\\.html?\\'" . web-mode)
            ("\\.tmpl\\'"  . web-mode)))

  (defun my-web-mode-hook ()
    "Hooks for Web mode."
    (setq web-mode-markup-indent-offset 2
          web-mode-script-padding 2
          web-mode-code-indent-offset 2))

  (add-hook 'web-mode-hook 'my-web-mode-hook)

  (setq web-mode-engines-alist
        '(("php" . "\\.phtml\\'")
          ("template-toolkit" . "\\.tmpl\\'")))
#+END_SRC
#+BEGIN_SRC emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.css\\'" . css-mode))
#+END_SRC
** config files
Syntax highlighting for ssh config, nginx config, vimrc (haha), yaml and lua.

#+BEGIN_SRC emacs-lisp
  (use-package ssh-config-mode
    :ensure t
    :mode ((".ssh/config\\'"       . ssh-config-mode)
           ("sshd?_config\\'"      . ssh-config-mode)
           ("known_hosts\\'"       . ssh-known-hosts-mode)
           ("authorized_keys2?\\'" . ssh-authorized-keys-mode)))

  (use-package nginx-mode
    :ensure t
    :mode "/etc/nginx/.*")

  (use-package vimrc-mode
    :ensure t
    :mode "\.vimrc")

  (use-package  gitignore-mode
    :ensure t
    :mode "\.gitignore")

  (use-package  gitconfig-mode
    :ensure t
    :mode "\.git/?config")

  (use-package yaml-mode
    :ensure t
    :mode "\\.yml$"
    :init (add-hook 'yaml-mode-hook
                    '(lambda ()
                       (define-key yaml-mode-map "\C-m" 'newline-and-indent))))

  (use-package lua-mode
    :ensure t
    :mode "\\.lua$")


#+END_SRC
** racket
#+BEGIN_SRC emacs-lisp
  (use-package racket-mode :ensure t)
#+END_SRC

** elisp
#+BEGIN_SRC emacs-lisp
  (put 'case 'lisp-indent-function 'cond)
#+END_SRC
** elasticsearch
#+BEGIN_SRC emacs-lisp
  (use-package es-mode :ensure t)
#+END_SRC
** bison
#+BEGIN_SRC emacs-lisp
  (use-package bison-mode :ensure t)
#+END_SRC
* global keybindings
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "M-x") 'helm-M-x)
  (global-set-key (kbd "C-x C-m") 'helm-M-x)

  (global-set-key (kbd "C-x g") 'magit-status)
  (global-set-key (kbd "C->") 'mc/mark-next-like-this)
  (global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
  (global-set-key (kbd "C-=") 'er/expand-region)

  (global-set-key (kbd "C-c c") 'org-capture)
  (global-set-key (kbd "C-c a") 'org-agenda)
  (global-set-key (kbd "C-c l") 'org-store-link)
  (global-set-key (kbd "C-c i") 'my-imapfilter)
  (global-set-key (kbd "C-c b c") 'bz-checksetup)
  (global-set-key (kbd "C-c m")  'mu4e)

  (global-set-key (kbd "C-c s") 'my-goto-scratch-buffer)

  (global-set-key (kbd "C-x b")   #'helm-mini)
  (global-set-key (kbd "C-x C-b") #'helm-buffers-list)
  (global-set-key (kbd "C-x C-f") #'helm-find-files)
  (global-set-key (kbd "C-x C-r") #'helm-recentf)
  (global-set-key (kbd "C-x r l") #'helm-filtered-bookmarks)

  (global-set-key (kbd "C-x k")   'kill-this-buffer)
  (global-set-key (kbd "C-x p")   'proced)
  (global-set-key (kbd "C-s")     'isearch-forward-regexp)
  (global-set-key (kbd "C-M-s")   'isearch-forward)
  (global-set-key (kbd "C-r")     'isearch-backward-regexp)
  (global-set-key (kbd "C-M-r")   'isearch-backward)

  (global-set-key (kbd "C-w") 'evil-window-map)
#+END_SRC
* evil keybindings
Setup evil with some very vim-like defaults.

** goto-last-change (needed for evil)

#+BEGIN_SRC emacs-lisp
  (use-package goto-last-change :ensure t)
#+END_SRC

** turn on evil
#+BEGIN_SRC emacs-lisp
  (use-package evil
    :ensure t
    :init
    (progn
      (setq evil-search-module           'evil-search
            evil-symbol-word-search      t
            evil-magic                   'very-magic
            evil-want-C-w-delete         nil
            evil-want-C-w-in-emacs-state t)

      (evil-mode 1)

      (add-to-list 'evil-emacs-state-modes 'sauron-mode)
      (add-to-list 'evil-emacs-state-modes 'epresent-mode)
      (add-to-list 'evil-insert-state-modes 'weechat-mode)
      (add-to-list 'evil-insert-state-modes 'sql-interactive-mode)
      (add-to-list 'evil-insert-state-modes 'racket-repl-mode)

      (unless (display-graphic-p)
        (evil-esc-mode))

      (define-key evil-normal-state-map (kbd "SPC o") 'imenu)
      (define-key evil-normal-state-map (kbd "SPC b") 'switch-to-buffer)

      (define-key evil-normal-state-map (kbd "C-b") 'evil-scroll-up)
      (define-key evil-normal-state-map (kbd "C-f") 'evil-scroll-down)

      (define-key evil-normal-state-map (kbd "[ SPC") (bind (evil-insert-newline-above) (forward-line)))
      (define-key evil-normal-state-map (kbd "] SPC") (bind (evil-insert-newline-below) (forward-line -1)))
      (define-key evil-normal-state-map (kbd "[ e") (kbd "ddkP"))
      (define-key evil-normal-state-map (kbd "] e") (kbd "ddp"))
      (define-key evil-normal-state-map (kbd "[ b") 'previous-buffer)
      (define-key evil-normal-state-map (kbd "] b") 'next-buffer)
      (define-key evil-normal-state-map (kbd "[ q") 'previous-error)
      (define-key evil-normal-state-map (kbd "] q") 'next-error)

      (define-key evil-normal-state-map (kbd "g p") (kbd "` [ v ` ]"))

      (define-key evil-motion-state-map "j" 'evil-next-visual-line)
      (define-key evil-motion-state-map "k" 'evil-previous-visual-line)

      (define-key evil-normal-state-map (kbd "Q") 'my-window-killer)
      (define-key evil-normal-state-map (kbd "Y") (kbd "y$"))

      (evil-define-key 'visual emacs-lisp-mode (kbd ", e") 'eval-region)

      ;; emacs lisp
      (evil-define-key 'normal emacs-lisp-mode-map "K" (bind (help-xref-interned (symbol-at-point))))

      (define-key evil-normal-state-map (kbd "[ h") 'git-gutter+-previous-hunk)
      (define-key evil-normal-state-map (kbd "] h") 'git-gutter+-next-hunk)
      (evil-ex-define-cmd "Gw" (bind (git-gutter+-stage-whole-buffer)))
      (define-key evil-visual-state-map (kbd "SPC SPC") 'helm-M-x)
      (define-key evil-normal-state-map (kbd "SPC SPC") 'helm-M-x)
      (define-key evil-normal-state-map (kbd "g b") 'helm-mini)
      (define-key evil-normal-state-map (kbd "SPC f") 'helm-find-files)
      (define-key evil-normal-state-map (kbd "SPC o") 'helm-semantic-or-imenu)
      (define-key evil-normal-state-map (kbd "SPC t") 'helm-etags-select)
      (define-key evil-normal-state-map (kbd "SPC y") 'helm-show-kill-ring)
      (define-key evil-normal-state-map (kbd "SPC m") 'helm-bookmarks)
      (define-key evil-normal-state-map (kbd "SPC r") 'helm-register)
      (define-key evil-normal-state-map (kbd "SPC l") 'helm-swoop)
      (define-key evil-normal-state-map (kbd "SPC L") 'helm-multi-swoop)
      (define-key evil-normal-state-map (kbd "g ]") 'etags-select-find-tag-at-point)
      (evil-define-key 'normal emacs-lisp-mode-map (kbd "g d") 'elisp-slime-nav-find-elisp-thing-at-point)

      (define-key evil-normal-state-map (kbd "SPC /") 'my-projectile-helm-ag)
      (define-key evil-normal-state-map (kbd "SPC e") 'helm-projectile-recentf)
      (define-key evil-normal-state-map (kbd "C-p") 'projectile-find-file)

      (evil-define-key 'normal js2-mode-map (kbd "g r") 'js2r-rename-var)
      (define-key evil-normal-state-map (kbd "g r") 'mc/mark-all-like-this-dwim)

      (define-key evil-operator-state-map (kbd "z") 'evil-ace-jump-char-mode)
      (define-key evil-normal-state-map (kbd "s") 'evil-ace-jump-char-mode)
      (define-key evil-motion-state-map (kbd "S-SPC") 'evil-ace-jump-line-mode)

      ;; escape minibuffer
      (define-key minibuffer-local-map [escape] 'my-minibuffer-keyboard-quit)
      (define-key minibuffer-local-ns-map [escape] 'my-minibuffer-keyboard-quit)
      (define-key minibuffer-local-completion-map [escape] 'my-minibuffer-keyboard-quit)
      (define-key minibuffer-local-must-match-map [escape] 'my-minibuffer-keyboard-quit)
      (define-key minibuffer-local-isearch-map [escape] 'my-minibuffer-keyboard-quit)

      (define-key minibuffer-local-map (kbd "C-w") 'backward-kill-word)

      (define-key magit-status-mode-map (kbd "C-n") 'magit-goto-next-sibling-section)
      (define-key magit-status-mode-map (kbd "C-p") 'magit-goto-previous-sibling-section)
      (define-key magit-status-mode-map (kbd "q") 'my-magit-quit-session)

      (define-key comint-mode-map [up] 'comint-previous-input)
      (define-key comint-mode-map [down] 'comint-next-input)

      ;; (define-key company-active-map (kbd "C-n") 'company-select-next)
      ;; (define-key company-active-map (kbd "C-p") 'company-select-previous)
      ;; (define-key company-active-map (kbd "<tab>") 'my-company-tab)
      ;; (define-key company-active-map (kbd "<backtab>") 'company-select-previous)

      ;; (define-key company-mode-map (kbd "<C-return>") 'helm-company)
      ;; (define-key company-active-map (kbd "<C-return>") 'helm-company)
      ;; (define-key web-mode-map (kbd "C-c C-d") 'ng-snip-show-docs-at-point)

      ))
#+END_SRC
** evil leader
#+BEGIN_SRC emacs-lisp
  (use-package evil-leader
    :ensure t
    :init
    (progn
      (global-evil-leader-mode t)
      (setq evil-leader/in-all-states t)
      (evil-leader/set-leader ",")
      (evil-leader/set-key
        "w" 'save-buffer
        "e" 'eval-last-sexp
        "H" 'helm-org-headlines
        "E" 'eval-defun
        "f" 'ctl-x-5-prefix
        "j" 'org-open-at-point
        "C" 'customize-group
        "b d" 'kill-this-buffer
        "b z" 'bzshell
        "v" (kbd "C-w v C-w l")
        "s" (kbd "C-w s C-w j")
        "P" 'package-list-packages
        "h" help-map
        "h h" 'help-for-help-internal
        "g s" 'magit-status
        "g b" 'magit-blame-mode
        "g a" 'git-gutter+-stage-hunks
        "g r" 'git-gutter+-revert-hunks
        "g c" 'magit-commit
        "T"   'my-solarized-toggle
        "g l" 'magit-log)))
#+END_SRC
** comment operator (gc)
use evil-commentary
#+BEGIN_SRC emacs-lisp
  (use-package evil-commentary :ensure t
    :config (evil-commentary-mode t))
#+END_SRC

** additional text objects
Add surround-style text objects.
#+BEGIN_SRC emacs-lisp
  (use-package evil-surround
    :ensure t
    :init (global-evil-surround-mode t))
#+END_SRC

indent text object
#+BEGIN_SRC emacs-lisp
  (use-package evil-indent-textobject
    :ensure t)
#+END_SRC

** jumps
Make emacs jump more like vim.
#+BEGIN_SRC emacs-lisp
  (use-package evil-jumper
    :ensure t
    :config
    (progn
      (setq evil-jumper-auto-center t
            evil-jumper-file (concat user-data-directory "evil-jumps")
            evil-jumper-auto-save-interval 3600)))
#+END_SRC

After searching, recenter on the search term.
#+BEGIN_SRC emacs-lisp
  (defadvice evil-ex-search-next (after advice-for-evil-ex-search-next activate)
    (recenter))

  (defadvice evil-ex-search-previous (after advice-for-evil-ex-search-previous activate)
    (recenter))
#+END_SRC

** evil org
#+BEGIN_SRC emacs-lisp
  (use-package evil-org
    :ensure t)
#+END_SRC

Also, let's make org-return work while we're at it.

#+BEGIN_SRC emacs-lisp
  (defun my-evil-ret (orig &rest args)
    (if (derived-mode-p 'org-mode)
        (org-return)
      (apply orig args)))

  (advice-add 'evil-ret :around #'my-evil-ret)
#+END_SRC

** disable vi/vim style-exits
#+BEGIN_SRC emacs-lisp
  (defadvice evil-quit (around advice-for-evil-quit activate)
    (message "Thou shall not quit!"))

  (defadvice evil-quit-all (around advice-for-evil-quit-all activate)
    (message "Thou shall not quit!"))
#+END_SRC

* Stuff to look at
** TODO install rings
** TODO install scpaste
** TODO install spaces
** TODO install sublimity
** SODO install stripe-buffer
