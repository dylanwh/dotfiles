#!/usr/bin/env perl
use feature 'say';
use strict;
use warnings;
use Env;
use Env qw(@PATH);
use English qw($OSNAME);
use File::Path qw(mkpath);
use File::Basename qw(dirname basename);
use File::Spec::Functions qw(catdir rel2abs abs2rel);
use File::stat qw(lstat);
use IO::File;
use Cwd qw(realpath);
use autodie qw(:default);
sub rm_if_link ($);

my $REPO = realpath(catdir(dirname(realpath(__FILE__)), '..'));

provide('doom',          '.doom.d');
provide('fish',          '.config/fish');
provide('imapfilter',    '.imapfilter');
provide('iterm2',        '.iterm2');
provide('mutt',          '.mutt');
provide('selenized',     '.config/selenized');
provide('starship.toml', '.config/starship.toml');
provide('terminfo',      '.terminfo');
provide('vim',           '.config/nvim');
provide('vim',           '.vim');

my @dotfiles = (
  'ctags',         'cvsignore',
  'fdignore',      'iterm2_shell_integration.fish',
  'mailcap',       'minicpanrc',
  'msmtprc',       'offlineimap.py',
  'offlineimaprc', 'quotes',
  'reply.pl',      'screenrc',
  'tmux.conf',     'todorc',
  'wyrdrc'
);

provide($_, ".$_") for @dotfiles;

mkpath "$HOME/.local/go";
rm_if_link "$HOME/.local/bin";
mkpath "$HOME/.local/bin";

foreach my $file (glob "$REPO/bin/*") {
  my $repo_file = abs2rel($file, $REPO);
  my $home_file = ".local/bin/" . basename($repo_file);

  provide($repo_file, $home_file, {replace => 1});
}

if (-d "$HOME/bin") {
  rename("$HOME/bin", "$HOME/bin.civil-war-backup");
}
if (-d "$HOME/go") {
  rename("$HOME/go", "$HOME/go.civil-war-backup");
}
if (-f "$HOME/.vimrc") {
  rename("$HOME/.vimrc", "$HOME/.vimrc.civil-war-backup");
}
if (-d "$HOME/.git") {
  rename("$HOME/.git", "$HOME/.oldgit");
}

mkpath "$HOME/.ssh";
rm_if_link "$HOME/.ssh/config.d";
mkpath "$HOME/.ssh/config.d";
foreach my $file (glob "$REPO/ssh/config.d/*") {
  my $repo_file = abs2rel($file, $REPO);
  my $home_file = ".ssh/config.d/" . basename($file);
  provide($repo_file, $home_file, {replace => 1});
}

open my $fh, '>', "$HOME/.ssh/config";
print $fh "Include config.d/*\n";
close $fh;

sub provide {
  my ($source, $target, $option) = @_;
  $target //= $source;
  my $s = rel2abs($source, $REPO);
  my $t = rel2abs($target, $HOME);
  mkpath(dirname($t));
  my $stat = lstat $t;
  if ($stat) {
    if (-l $stat) {
      unless (readlink($t) eq $s) {
        printf "%s: %s -> %s\n", $t, readlink($t), $s;
        unlink($t);
        symlink($s, $t);
      }
    }
    elsif (-f $stat) {
      printf "%s: conflicting file\n", $t;
      if ($option->{replace}) {
        unlink($t);
      }
      else {
        rename($t, "$t.civil-war-backup");
      }
      symlink($s, $t);
    }
    elsif (-d $stat) {
      printf "%s: conflicting directory\n", $t;
      rename($t, "$t.civil-war-backup");
      symlink($s, $t);
    }
    else {
      printf "%s: unknown type\n", $t;
    }
  }
  else {
    printf "%s: new file or directory\n", $t;
    symlink($s, $t);
  }
}

sub rm_if_link ($) {
  my ($path) = @_;
  unlink $path if -l $path;
}
