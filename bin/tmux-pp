#!/usr/bin/env perl
use 5.10.1;
use Mojo::Template;
use utf8;

use constant WORDS => qw(
  bold nobold
  italics noitalics
  underscore nounderscore
  window_activity_flag
  window_bell_flag
  window_silence_flag
  green red blue cyan magenta white black
);
use constant + {map { ($_ => $_) } WORDS};

sub c($) {
  my ($color) = @_;
  if ($color =~ /^[[:xdigit:]]{6}$/) {
    return "#$color";
  }
  else {
    return $color;
  }
}
sub bg($)  { return 'bg=' . c $_[0] }
sub fg($)  { return 'fg=' . c $_[0] }
sub raw($) { return $_[0] }

sub style($;@) {
  my ($styles, @extra) = @_;
  '#[' . join(',', @$styles) . ']' . join("", @extra);
}
sub list(@) { join(",", @_) }

sub if_($) {
  my ($cond) = @_;
  my $if = if_->new;
  $if->cond($cond);
  return $if;
}

binmode STDOUT, ':encoding(utf-8)';
binmode ARGV,   ':encoding(utf-8)';
binmode STDIN,  ':encoding(utf-8)';

my $mt = Mojo::Template->new(vars => 1, namespace => 'main', auto_escape => 1);
$mt->escape(sub {
  my $s = shift;
  $s =~ s/'/\\'/gs;
  $s =~ s/\n+/ /gs;
  return "'$s'";
});
local $/ = undef;
my $input = <ARGV>;
utf8::decode($input);

say $mt->render($input, \%ENV);

BEGIN {

  package if_;
  use Mojo::Base -base;
  use overload '""' => 'to_string', fallback => 1;
  has ['cond', 'then', 'else'];

  sub to_string {
    my $self  = shift;
    my @parts = (
      $self->cond,
      $self->_escape($self->then),
      $self->else ? $self->_escape($self->else) : '',
    );
    return '#{?' . join(",", @parts) . "}";
  }

  sub _escape {
    my ($self, $s) = @_;
    $s =~ s/([,\}])/#$1/gsr;
  }
}
