#!/usr/bin/perl
use strict;
use warnings;
use Getopt::Long qw( :config gnu_getopt );
use IO::All;
use Path::Class 'file';
use File::Path 'mkpath';
use Template;

# The file we are standing in for.
my $filename;

# The template file to use.
my $template = 'auto';

# whether or not we create file.
my $create = 0;

# whether or not we mkpath(dirname(file))
my $mkdir = 0;

# pre-defined template variables
my %define = ( ENV => { %ENV } );

# include path
my @include = ("$ENV{HOME}/.mknew");

GetOptions(
    'create|c'     => \$create,
    'mkdir|m'      => \$mkdir,
    'template|t=s' => \$template,
    'filename|f=s' => \$filename,
    'define|D=s%'  => \%define,
);

$mkdir = 1 if $create;

die "$0 --filename is required" unless $filename;

$filename = file($filename);
if ( -f $filename ) {
    # dump $filename to stdout if create == 0,
    # else do nothing at all
    print io($filename)->all unless $create;
    exit 0;
}

mkpath($filename->dir->stringify) if $mkdir;

$define{filename} = $filename;
$define{create}   = $create;
$define{mkdir}    = $mkdir;
$define{suffix}   = (split(/\./, $filename->basename))[-1];

my $output = $create ? io($filename) : io->stdout ;
my $tt = Template->new(
    {
        INCLUDE_PATH => \@include,
        POST_CHOMP   => 1,
        EVAL_PERL    => 1,
    }
);

if (-f file($include[0], $template)) {
    $tt->process($template, \%define, $output) or die $tt->error . "\n";
}
else {
    die "No $template";
}
