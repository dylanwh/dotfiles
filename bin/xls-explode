#!/usr/bin/env perl
use strict;
use warnings;
use feature 'switch';
use bigint;
use charnames ':full';
use Spreadsheet::ParseExcel;
use Text::CSV;
use Path::Class;
use File::Basename 'basename';
use Encode;
use Encode::Guess 'ascii', 'latin1', 'utf8';
use Try::Tiny;
use Devel::Peek;

use List::MoreUtils 'none';

my $csv = Text::CSV->new({ binary => 1, eol => "\n" });
my $p   = Spreadsheet::ParseExcel->new;

my $file = file(shift);
my $dir  = dir(shift) || $file->parent->subdir(phrase_to_ident(basename($file, ".xls")));

my $doc = $p->Parse($file->stringify);
$dir->mkpath;

for my $sheet ( $doc->worksheets ) {
    my $file = $dir->file( phrase_to_ident( $sheet->get_name ) . ".csv" );
    my $fh   = $file->openw;
    binmode $fh, ':encoding(utf8)';

    my ( $row_min, $row_max ) = $sheet->row_range();
    my ( $col_min, $col_max ) = $sheet->col_range();

    warn "    File: $file\n";
    for my $row ( $row_min .. $row_max ) {
        my @row = map {
            clean(
                $sheet->get_cell( $row, $_ )
            )
        } $col_min .. $col_max;

        next if none { $_ } @row;

        $csv->combine(@row);
        my $line = $csv->string;

        if ($row[0] == 310033 || $row[0] == 310032) {
            string_info($line);
        }

        $fh->print($line);
    }

    $fh->close;
}


sub phrase_to_ident {
    my ($ident) = @_;
    $ident =~ s/\(.*\s+.*\)//g;
    $ident =~ s/\((\S+)\)/_$1_/g;
    $ident =~ s/&/ and /g;
    $ident =~ s/\W+/_/g;
    $ident =~ s/([a-z])([A-Z])/$1_$2/g;
    $ident =~ s/([A-Za-z])(\d)/$1_$2/g;
    $ident =~ s/(\d)([A-Za-z])/$1_$2/g;
    $ident =~ s/_+$//;
    $ident =~ s/^_+//;
    $ident =~ s/_+/_/g;
    $ident =~ s/_v_(\d)/_v$1/g;
    $ident =~ s/^v_(\d)/v$1/g;

    if ($ident =~ s/^(\d{4})_//) {
        $ident .= "_$1";
    }
    
    $ident =~ s/v(\d+)_(\d{4})/$2_v$1/g;

    return lc $ident;
}

use Devel::StringInfo 'string_info';

sub clean_int {
    my ($x) = @_;
    my ($zeros) = $x =~ /^(0+)\d+$/;
    
    return ($zeros || '') . Math::BigInt->new($x);
}

sub clean_decode {
    my ($str) = @_;

    try {
        #$str = decode( 'utf-8', $str );
    }
    catch {
        #die "invalid: $str\n";
    };

    return $str;
}

sub clean {
    my ($cell) = @_;
    return '' unless $cell;
    my $v = $cell->value;
    my $u = $cell->unformatted; # for org id stuff
    my $e = $cell->encoding;    # not used

    given ($v) {
        when (/^\d{10,}$/) {
            $v = clean_int($u);
        }
    }

    return $v;
}

sub remove_utf8_punctuation {
    local $_ = shift;

    s/\N{SINGLE LOW-9 QUOTATION MARK}/,/g;
    s/\N{DOUBLE LOW-9 QUOTATION MARK}/,,/g;
    s/\N{HORIZONTAL ELLIPSIS}/.../g;

    s/\N{MODIFIER LETTER CIRCUMFLEX ACCENT}/^/g;

    s/\N{LEFT SINGLE QUOTATION MARK}/'/g;
    s/\N{RIGHT SINGLE QUOTATION MARK}/'/g;
    s/\N{LEFT DOUBLE QUOTATION MARK}/"/g;
    s/\N{RIGHT DOUBLE QUOTATION MARK}/"/g;
    s/\N{BULLET}/*/g;
    s/\N{EN DASH}/-/g;
    s/\N{EM DASH}/-/g;
    s/\N{LATIN CAPITAL LIGATURE OE}/OE/g;
    s/\N{LATIN SMALL LIGATURE OE}/oe/g;

    return $_;
}
