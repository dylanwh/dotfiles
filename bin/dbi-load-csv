#!/usr/bin/perl
use strict;
use warnings;

use Getopt::Long qw( :config gnu_getopt );
use SQL::Abstract;
use Text::CSV;
use DBI;
use Try::Tiny;
use Eval::Closure 'eval_closure';

my ($DBI_DSN, $DBI_USER, $DBI_PASS) = @ENV{qw[DBI_DSN DBI_USER DBI_PASS]};
my $TABLE = 'table';
my $WHERE;
my $COMMIT;

GetOptions(
    'dsn|D=s'     => \$DBI_DSN,
    'user|u=s'    => \$DBI_USER,
    'pass|p=s'    => \$DBI_PASS,
    'table|t=s'   => \$TABLE,
    'where|W=s'   => \$WHERE,
    'commit|C'    => \$COMMIT,
);


my $DBI = DBI->connect($DBI_DSN, $DBI_USER, $DBI_PASS, {RaiseError => 1, AutoCommit => 0, PrintError => 0});
my $CSV = Text::CSV->new({binary => 1, blank_is_undef => 1, eol => "\n"});
my $SA  = SQL::Abstract->new(quote_char => '"');

if (defined $WHERE) {
    $WHERE = eval_closure(source => "package main; sub { local %_ = %{\$_[0]}; return $WHERE }");
}

my @NAMES = @{$CSV->getline(\*ARGV)};
$CSV->column_names(@NAMES);
   

while ( my $row = $CSV->getline_hr( \*ARGV ) ) {
    last unless $row;

    #try {
        if ( not $WHERE ) {
            insert($row);
        }
        else {
            my $where = $WHERE->($row);
            if ( check($where) ) {
                update( $row, $where );
            }
            else {
                insert($row);
            }
        }
    #}
    #catch {
    #    if (/duplicate key value violates unique constraint/i) {
    #        $CSV->print(\*STDERR, [@$row{@NAMES}]);
    #        $DBI->rollback;
    #    }
    #}
}
if ($COMMIT) {
    $DBI->commit;
}
else {
    $DBI->rollback
}

sub emit {
    my ($sql, @bind) = @_;
    $sql =~ s!\?!$DBI->quote(shift @bind)// 'NULL' !ge;
    print "$sql\n";
}

sub insert {
    my ($row) = @_;
    my ($sql, @bind) = $SA->insert($TABLE, $row);
    my $sth = $DBI->prepare($sql);
    emit($sql, @bind);
    $sth->execute(@bind);
}

sub update {
    my ($row, $where) = @_;
    my ($sql, @bind) = $SA->update($TABLE, $row, $where);
    my $sth = $DBI->prepare($sql);
    emit($sql, @bind);
    $sth->execute(@bind);
}

sub check {
    my ($where) = @_;
    my ($sql, @bind) = $SA->select($TABLE, 'count(*)', $where);
    my $sth = $DBI->prepare($sql);
    $sth->execute(@bind);
    my ($count) = $sth->fetchrow_array;
    if ($count == 1) {
        return 1;
    }
    elsif ($count == 0) {
        return 0;
    }
    else {
        die "--where (-W) query returns $count results!\n";
    }
}

sub k { return +{ map { ($_, $_{$_}) } @_ } }
