#!/usr/bin/env perl
use 5.24.0;
use experimental 'signatures';
no warnings 'experimental';
use LWP::UserAgent;
use JSON::MaybeXS;
use URI;
use Data::Printer;
use Carp;
use Digest::SHA qw(sha256_hex);
use File::HomeDir;
use File::Spec;
use Storable;
use List::Util qw(any first);

use constant BMO => 'https://bugzilla.mozilla.org';
use constant BMO_API_KEY => $ENV{BMO_API_KEY};

my $ua = LWP::UserAgent->new(
    agent => 'git-bmo-branches v1 dylan@hardison.net',
);

my $patches = {
    f1         => 'attachments.isobsolete',
    o1         => 'equals',
    v1         => 0,
    f2         => 'product',
    v2         => 'bugzilla.mozilla.org',
    o2         => 'equals',
    f3         => 'assigned_to',
    o3         => 'notequals',
    v3         => 'dylan@mozilla.com',
    resolution => '---',
};

my $fixup = sub($bugs) { add_patches($ua, $bugs) };
my $patch_bugs     = bug_search_lazy( $ua, $patches, $fixup);
my $assigned_bugs  = bug_search_lazy( $ua, 'ALL @dylan@mozilla.com', $fixup);

my %bucket;

foreach my $bug (@$assigned_bugs) {

}

foreach my $bug (@$patch_bugs) {
    foreach my $patch (@{ $bug->{attachments} }) {
        if (!$patch->{flags} || ! @{$patch->{flags}}) {
            push @{ $bucket{"needs_attention"} }, {
                bug => $bug,
                todo => 'TODO',
                text => "ask for review or obsolete patch",
                body => [
                    "Patch description: $patch->{description}",
                ],
            };
        }
        else {
            if (has_flags($patch->{flags}, 'review', '+')) {
                my $action;
                if ($bug->{assigned_to} =~ /^(dkl|glob)\@mozilla.com/) {
                    $action = "ask $bug->{assigned_to} to commit";
                }
                elsif ($bug->{assigned_to} ne 'nobody@mozilla.org') {
                    $action = "commit for $bug->{assigned_to}";
                }
                else {
                    $action = 'find owner and/or commit patch';
                }
                push @{ $bucket{"needs_attention"} }, {
                    bug => $bug,
                    todo => 'TODO',
                    text => "$action patch",
                    body => [
                        "Patch description: $patch->{description}",
                    ],
                } if $action;
            }

            if (has_flags($patch->{flags}, 'review', '?')) {
                if ($bug->{assigned_to} eq 'nobody@mozilla.org') {
                    push @{ $bucket{"needs_attention"} }, {
                        bug => $bug,
                        todo => 'TODO',
                        text => "find owner for unassigned bug with patch",
                    };
                }
            }

            if (has_flags($patch->{flags}, 'review', '?', 'dylan@mozilla.com')) {
                push @{ $bucket{"review"} }, {
                    bug => $bug,
                    todo => 'TODO',
                    text => "review patch for $bug->{assigned_to}",
                };
            }
        }
    }
}

foreach my $name (keys %bucket) {
    say "** $name";

    my %item;
    foreach my $item (@{ $bucket{$name} }) {
        push @{ $item{$item->{bug}->{id}} }, $item;
    }
    foreach my $bug_id (keys %item) {
        my $items = $item{$bug_id};
        if (@$items == 1) {
            say_item(3, $items->[0]);
        }
        else {
            my $bug = $items->[0]{bug};
            say '*** ', buglink($bug, "Bug $bug->{id} - $bug->{summary}");
            foreach my $item (@$items) {
                say_item(4, $item);
            }
        }
    }
}


sub say_item($level, $item) {
    my $bug = $item->{bug};
    my @body = (
        "Summary: $bug->{summary}",
        "Assignee: $bug->{assigned_to}",
    );
    if ($item->{body}) {
        push @body, @{ $item->{body} };
    }

    say join("",
        '*' x $level . ' ',
        $item->{todo} ? "$item->{todo} " : "",
        P($bug),
        buglink($bug),
        $item->{text}
    );
    say ' ' x ($level + 1), $_ for @body;
}

sub buglink($bug, $summary = undef) {
    $summary //= "Bug $bug->{id}";
    return "[[bmo:$bug->{id}][$summary]] ";
}

sub P($bug) {
    my $p = $bug->{priority};
    if ($p && $p ne '--') {
        my ($d) = $p =~ /^P(\d)/;
        return "[#" . (chr(ord('A') + ($d-1))) . '] ';
    }
    else {
        return '';
    }
}


sub bug_search ($ua, $quicksearch) {
    my $fields = 'summary,priority,status,resolution,product,component,id,flags,assigned_to';
    my $uri = URI->new(BMO);
    my $params = { include_fields => $fields };

    if (ref $quicksearch) {
        %$params = (%$params, %$quicksearch);
    }
    else {
        $params->{quicksearch} = $quicksearch;
    }

    return bmo_rest($ua, 'bug', $params)->{bugs};
}

sub bug_search_lazy {
    my ($ua, $search, $fixup) = @_;
    my $json = JSON::MaybeXS->new(allow_nonref => 1, canonical => 1)->encode($search);
    my $name = sha256_hex($json);
    my $data_dir = File::Spec->catdir(File::HomeDir->my_data, "bmo2org");
    my $file = File::Spec->catfile($data_dir, $name);
    if (!-d $data_dir) {
        mkdir($data_dir) or die "mkdir($data_dir): $!";
    }

    if (-f $file) {
        warn "cache hit: $json\n";
        return retrieve($file);
    } else {
        warn "cache miss $json\n";
        my $bugs = bug_search($ua, $search);
        $fixup->($bugs);
        store($bugs, $file);
        return $bugs;
    }
}

sub add_attachments($ua, $bugs, $filter = undef) {
    my @bug_id = map { $_->{id} } @$bugs;
    $filter //= sub { 1 };

    my $fields = 'flags,file_name,summary,description,content_type,is_patch,is_obsolete,attacher';
    my $attachments = bmo_rest($ua, "bug/$bug_id[0]/attachment",
        { include_fields => $fields, ids => \@bug_id })->{bugs};
    foreach my $bug (@$bugs) {
        $bug->{attachments} = [grep { $filter->($_) } @{$attachments->{$bug->{id}}}];
    }
}

sub add_patches ($ua, $bugs) {
    add_attachments( $ua, $bugs, sub { !$_->{is_obsolete} && ( $_->{is_patch} || $_->{content_type} eq 'text/x-github-pull-request' ) } );
}

sub has_flags($flags, $name, $status, $target = undef) {
    if (defined $target) {
        return any { $_->{name} eq $name && $_->{status} eq $status && $_->{requestee} eq $target } @$flags;
    }
    else {
        return any { $_->{name} eq $name && $_->{status} eq $status } @$flags;
    }
}

sub bmo_rest($ua, $path, $query) {
    my $uri = URI->new(BMO);
    $uri->path("/rest/$path");
    $uri->query_form(
        %$query,
        api_key => BMO_API_KEY,
    );

    my $response = $ua->get($uri);
    if ( $response->code == 200 ) {
        return decode_json( $response->content );
    }
    else {
        croak $response->content;
    }
}



