# #!/usr/bin/perl
snippet #!
	#!/usr/bin/env perl
	
# Hash Pointer
snippet .
	 =>
snippet sub
	sub ${1:foo} {
		${2}
	}
snippet if
	if ( ${1} ) {
		${2:# body...}
	}
snippet ife
	if (${1}) {
		${2:# body...}
	}
	else {
		${3:# else...}
	}
snippet elsif
	elsif (${1:}) {
		${2:# else...}
	}
snippet else
	else {
		${1:# else...}
	}
snippet for
	for my $${1:var} (${2:1..10}) {
		${3}
	}
snippet fora
	for my $${1:var} (@${2:array}) {
		${3}
	}
snippet while
	while (${1:cond}) {
		${2}
	}
snippet eval
	eval {${1}};
	if ($@) {
		${2}
	}
snippet try
	try {
	    ${1}
	} catch {
	    ${2}
	};
snippet st
	map  { $_->[0] }
	sort { $a->[1] ${3:cmp} $b->[1] }
	map  { [$_, ${2:function}] }
	${1:list}
snippet tbl
	local $Test::Builder::Level = $Test::Builder::Level + 1;
snippet ccl
	local $Carp::CarpLevel = $Carp::CarpLevel + 1;
snippet linc
	local $${1:a} = $$1 + ${2:1};
	${3}
snippet script
	#!/usr/bin/env perl
	use strict;
	use warnings;

snippet test
	#!/usr/bin/env perl
	use strict;
	use warnings;
	use Test::More;

	${1}

	done_testing;
snippet nac
	use namespace::autoclean;
snippet dd
	use Data::Dumper; die Dumper(${1});
snippet ddd
	use Data::Dumper; $Data::Dumper::Maxdepth = ${1:1}; die Dumper(${2});
snippet wd
	use Data::Dumper; warn Dumper(${1});
snippet wdd
	use Data::Dumper; $Data::Dumper::Maxdepth = ${1:1}; warn Dumper(${2});
snippet package
	package ${1:`substitute(matchstr(expand("%"), '^lib/\zs.*\ze\.pm'), '/', '::', 'g')`};
	use strict;
	use warnings;

	${2}

	1;
#
# Moose
#
snippet class
	package ${1:`substitute(matchstr(expand("%"), '^lib/\zs.*\ze\.pm'), '/', '::', 'g')`};
	use Moose;
	use namespace::autoclean;

	${2}

	__PACKAGE__->meta->make_immutable;

	1;
# XXX: ideally, this would be merged with the one above, but we need posthooks
# for that to happen. also, some way to get the extends line to update with
# the package line would be nice, maybe?
snippet subclass
	package ${1:`substitute(matchstr(expand("%"), '^lib/\zs.*\ze\.pm'), '/', '::', 'g')`};
	use Moose;
	use namespace::autoclean;
	extends '${2:`matchstr(substitute(matchstr(expand("%"), '^lib/\zs.*\ze\.pm'), '/', '::', 'g'), '.*\ze::.*')`}';

	${3}

	__PACKAGE__->meta->make_immutable;
	1;
snippet role
	package ${1:`substitute(matchstr(expand("%"), '^lib/\zs.*\ze\.pm'), '/', '::', 'g')`};
	use Moose::Role;
	use namespace::autoclean;

	${2}

	1;
snippet has
	has '${1:attr}' => (
		is  => '${2:ro}',
		isa => '${3:Str}',${4}
	);
snippet hasd
	has '${1:attr}' => (
		is      => '${2:ro}',
		isa     => '${3:Str}',
		default => sub { my $self = shift; ${4} },
	);
snippet hasl
	has '${1:attr}' => (
		is      => '${2:ro}',
		isa     => '${3:Str}',
		builder => '_build_$1',
		lazy    => 1,${4}
	);

	sub _build_$1 {
		my $self = shift;
		${5}
	}
snippet m
	sub ${1:foo} {
		my $self = shift;
		${2}
	}
snippet around
	around ${1:foo} => sub {
		my $orig = shift;
		my $self = shift;
		${2}
	};
snippet after
	after ${1:foo} => sub {
		my $self = shift;
		${2}
	};
snippet before
	before ${1:foo} => sub {
		my $self = shift;
		${2}
	};
snippet usegl
	use Getopt::Long qw(:config gnu_getopt);
snippet pos
	my $self = shift;
	my (${1:$x}) = pos_validated_list(\@_, { isa => ${2:Str} }${3});
snippet action
	with 'Verby::Action';
	
	sub do {
		my ($self, $ctx) = @_;
		${1}
	}
	
	sub verify {
		my ($self, $ctx) = @_;
		return ${2};
	}
